{"columns": ["Question", "Type", "Query", "result"], "data": [["What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "AI Generated SQL Query", "SELECT MAX(CAST(REPLACE(`Free Meal Count (K-12)`, ',', '') AS REAL) / CAST(REPLACE(`Enrollment (K-12)`, ',', '') AS REAL)) FROM frpm WHERE `County Name` = 'Alameda'", "Correct"], ["What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "Gold Standard SQL Query", "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1", ""], ["Please list the phone numbers of the schools with the top 3 SAT excellence rate.", "AI Generated SQL Query", "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / CAST(T2.NumTstTakr AS REAL) DESC LIMIT 3", "Correct"], ["Please list the phone numbers of the schools with the top 3 SAT excellence rate.", "Gold Standard SQL Query", "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3", ""], ["When did the first-through-twelfth-grade school with the largest enrollment open?", "AI Generated SQL Query", "SELECT OpenDate FROM schools WHERE GSoffered = \"K-12\" ORDER BY enroll12 DESC LIMIT 1", "Incorrect"], ["When did the first-through-twelfth-grade school with the largest enrollment open?", "Gold Standard SQL Query", "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1", ""], ["What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?", "AI Generated SQL Query", "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500", "Correct"], ["What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?", "Gold Standard SQL Query", "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500", ""], ["What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?", "AI Generated SQL Query", "SELECT COUNT(CDSCode) FROM schools WHERE MailCity = \"Hickman\" AND CharterNum = \"00D4\"", "Correct"], ["What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?", "Gold Standard SQL Query", "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'", ""], ["What is the grade span offered in the school with the highest longitude?", "AI Generated SQL Query", "SELECT GSoffered FROM schools ORDER BY ABS(Longitude) DESC LIMIT 1", "Correct"], ["What is the grade span offered in the school with the highest longitude?", "Gold Standard SQL Query", "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1", ""], ["State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD", "AI Generated SQL Query", "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000", "Correct"], ["State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD", "Gold Standard SQL Query", "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000", ""], ["For the female client who was born in 1976/1/29, which district did she opened her account?", "AI Generated SQL Query", "SELECT T3.A2 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T3.district_id = T1.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976/1/29'", "Incorrect"], ["For the female client who was born in 1976/1/29, which district did she opened her account?", "Gold Standard SQL Query", "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'", ""], ["In 1996, which districts have the highest unemployment rate? List their branch location and district name.", "AI Generated SQL Query", "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1", "Correct"], ["In 1996, which districts have the highest unemployment rate? List their branch location and district name.", "Gold Standard SQL Query", "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1", ""], ["How many male clients in 'Hl.m. Praha' district?", "AI Generated SQL Query", "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M'", "Correct"], ["How many male clients in 'Hl.m. Praha' district?", "Gold Standard SQL Query", "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'", ""], ["Please list all the transactions made by accounts from district 5.", "AI Generated SQL Query", "SELECT T1.account_id, T1.date, T1.type, T1.operation, T1.amount, T1.balance FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = '5'", "Incorrect"], ["Please list all the transactions made by accounts from district 5.", "Gold Standard SQL Query", "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5", ""], ["Please provide the IDs of the 3 female clients with the largest loans.", "AI Generated SQL Query", "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3", "Correct"], ["Please provide the IDs of the 3 female clients with the largest loans.", "Gold Standard SQL Query", "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3", ""], ["How many triple type bonds are there?", "AI Generated SQL Query", "SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'", "Correct"], ["How many triple type bonds are there?", "Gold Standard SQL Query", "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'", ""], ["What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "AI Generated SQL Query", "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001' AND T1.bond_id = 'TR001_2_6'", "Correct"], ["What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "Gold Standard SQL Query", "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'", ""], ["How many of the molecules are not carcinogenic?", "AI Generated SQL Query", "SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'", "Correct"], ["How many of the molecules are not carcinogenic?", "Gold Standard SQL Query", "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'", ""], ["Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "AI Generated SQL Query", "SELECT COUNT(molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'", "Correct"], ["Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "Gold Standard SQL Query", "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'", ""], ["Is molecule TR151 carcinogenic?", "AI Generated SQL Query", "SELECT label FROM molecule WHERE molecule_id = 'TR151'", "Correct"], ["Is molecule TR151 carcinogenic?", "Gold Standard SQL Query", "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'", ""], ["What is the bond type of TR007_4_19?", "AI Generated SQL Query", "SELECT bond_type FROM bond WHERE bond_id = \"TR007_4_19\"", "Correct"], ["What is the bond type of TR007_4_19?", "Gold Standard SQL Query", "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'", ""], ["What is the molecule id of bond id TR001_1_7?", "AI Generated SQL Query", "SELECT molecule_id FROM bond WHERE bond_id = \"TR001_1_7\"", "Correct"], ["What is the molecule id of bond id TR001_1_7?", "Gold Standard SQL Query", "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'", ""], ["in molecules with triple bonds, how many of them are not carcinogenic?", "AI Generated SQL Query", "SELECT COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'", "Incorrect"], ["in molecules with triple bonds, how many of them are not carcinogenic?", "Gold Standard SQL Query", "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'", ""], ["How many types of cards does the artist Aaron Boyd illustrated about card art?", "AI Generated SQL Query", "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = \"Aaron Boyd\"", "Incorrect"], ["How many types of cards does the artist Aaron Boyd illustrated about card art?", "Gold Standard SQL Query", "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'", ""], ["What is the type of card \"Benalish Knight\"?", "AI Generated SQL Query", "SELECT type FROM cards WHERE name = \"Benalish Knight\"", "Correct"], ["What is the type of card \"Benalish Knight\"?", "Gold Standard SQL Query", "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'", ""], ["What are the card layout of cards with keyword of flying?", "AI Generated SQL Query", "SELECT layout FROM cards WHERE keywords LIKE '%Flying%'", "Correct"], ["What are the card layout of cards with keyword of flying?", "Gold Standard SQL Query", "SELECT layout FROM cards WHERE keywords = 'Flying'", ""], ["How many cards are having future frame version and what are the legality status of these cards?", "AI Generated SQL Query", "SELECT COUNT(T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.id WHERE T1.frameVersion = 'future' AND T2.status = 'legal'", "Incorrect"], ["How many cards are having future frame version and what are the legality status of these cards?", "Gold Standard SQL Query", "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'", ""], ["What is the  unconverted mana do all the cards created by Rob Alexander cost in total?", "AI Generated SQL Query", "SELECT SUM(CAST(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE", "Incorrect"], ["What is the  unconverted mana do all the cards created by Rob Alexander cost in total?", "Gold Standard SQL Query", "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'", ""], ["What kind of printing is on the card that Daren Bader created?", "AI Generated SQL Query", "SELECT availability FROM cards WHERE artist = 'Daren Bader'", "Correct"], ["What kind of printing is on the card that Daren Bader created?", "Gold Standard SQL Query", "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'", ""], ["What is the language and expansion type of set number 206?", "AI Generated SQL Query", "SELECT T1.language, T2.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.id = 206", "Correct"], ["What is the language and expansion type of set number 206?", "Gold Standard SQL Query", "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206", ""], ["Give the code of sets have expansion type of 'expansion'?", "AI Generated SQL Query", "SELECT setCode FROM sets WHERE type = 'expansion'", "Incorrect"], ["Give the code of sets have expansion type of 'expansion'?", "Gold Standard SQL Query", "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode", ""], ["Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.", "AI Generated SQL Query", "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL", "Correct"], ["Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.", "Gold Standard SQL Query", "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL", ""], ["What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "AI Generated SQL Query", "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T2.translation = 'Hauptset Zehnte Edition'", "Correct"], ["What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "Gold Standard SQL Query", "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'", ""], ["What's the magic card market name for the set which was released on 2017/6/9?", "AI Generated SQL Query", "SELECT mcmName FROM sets WHERE releaseDate = \"2017-06-09\"", "Correct"], ["What's the magic card market name for the set which was released on 2017/6/9?", "Gold Standard SQL Query", "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'", ""], ["Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "AI Generated SQL Query", "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1", "Correct"], ["Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "Gold Standard SQL Query", "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1", ""], ["What is the display name of the user who has the most number of views?", "AI Generated SQL Query", "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1", "Correct"], ["What is the display name of the user who has the most number of views?", "Gold Standard SQL Query", "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", ""], ["Among the posts owned by csgillespie, how many of them are root posts?", "AI Generated SQL Query", "SELECT COUNT(Id) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL", "Incorrect"], ["Among the posts owned by csgillespie, how many of them are root posts?", "Gold Standard SQL Query", "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL", ""], ["What is the average score of the posts owned by the user csgillespie?", "AI Generated SQL Query", "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "Correct"], ["What is the average score of the posts owned by the user csgillespie?", "Gold Standard SQL Query", "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", ""], ["Provide the display name of the user who made the vote No.6347.", "AI Generated SQL Query", "SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = '6347'", "Correct"], ["Provide the display name of the user who made the vote No.6347.", "Gold Standard SQL Query", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347", ""], ["List the title of posts which were edited by Vebjorn Ljosa.", "AI Generated SQL Query", "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'", "Incorrect"], ["List the title of posts which were edited by Vebjorn Ljosa.", "Gold Standard SQL Query", "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'", ""], ["Which users have posted the most comments. List out the user's badge?", "AI Generated SQL Query", "SELECT T1.UserId, T1.Name FROM badges AS T1 INNER JOIN ( SELECT UserId, COUNT(Id) AS comment_count FROM comments GROUP BY UserId ORDER BY comment_count DESC LIMIT 1 ) AS T2 ON T1.UserId = T2.UserId", "Incorrect"], ["Which users have posted the most comments. List out the user's badge?", "Gold Standard SQL Query", "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1", ""], ["State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "AI Generated SQL Query", "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0'", "Incorrect"], ["State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "Gold Standard SQL Query", "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'", ""], ["How many adults who obtained the badge Supporter?", "AI Generated SQL Query", "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age BETWEEN 19 AND 65", "Correct"], ["How many adults who obtained the badge Supporter?", "Gold Standard SQL Query", "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65", ""], ["Calculate the ratio of votes in 2010 and 2011.", "AI Generated SQL Query", "SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN Id ELSE NULL END) AS REAL) / COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN Id ELSE NULL END) FROM votes", "Correct"], ["Calculate the ratio of votes in 2010 and 2011.", "Gold Standard SQL Query", "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes", ""], ["How many negative comments were given by user ID 13?", "AI Generated SQL Query", "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60", "Correct"], ["How many negative comments were given by user ID 13?", "Gold Standard SQL Query", "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60", ""], ["What are the titles of the top 5 posts with the highest popularity?", "AI Generated SQL Query", "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5", "Correct"], ["What are the titles of the top 5 posts with the highest popularity?", "Gold Standard SQL Query", "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5", ""], ["When did 'chl' cast its first vote in a post?", "AI Generated SQL Query", "SELECT MIN(T2.CreationDate) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl'", "Correct"], ["When did 'chl' cast its first vote in a post?", "Gold Standard SQL Query", "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1", ""], ["What is the average score of Stephen Turner's posts?", "AI Generated SQL Query", "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Stephen Turner'", "Correct"], ["What is the average score of Stephen Turner's posts?", "Gold Standard SQL Query", "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'", ""], ["How many users were awarded with 'Citizen Patrol' badge?", "AI Generated SQL Query", "SELECT COUNT(UserId) FROM badges WHERE Name = 'Citizen Patrol'", "Correct"], ["How many users were awarded with 'Citizen Patrol' badge?", "Gold Standard SQL Query", "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'", ""], ["Give the texts commented on the post about linear regression.", "AI Generated SQL Query", "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'", "Correct"], ["Give the texts commented on the post about linear regression.", "Gold Standard SQL Query", "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'", ""], ["Please list the full names of all the superheroes with over 15 super powers.", "AI Generated SQL Query", "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T1.full_name) > 15", "Incorrect"], ["Please list the full names of all the superheroes with over 15 super powers.", "Gold Standard SQL Query", "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15", ""], ["Which superheroes have a durability attribute value of less than 50?", "AI Generated SQL Query", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50", "Correct"], ["Which superheroes have a durability attribute value of less than 50?", "Gold Standard SQL Query", "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)", ""], ["What is the superpower of hero ID 56?", "AI Generated SQL Query", "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56", "Correct"], ["What is the superpower of hero ID 56?", "Gold Standard SQL Query", "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56", ""], ["How many superheroes were published by Dark Horse Comics?", "AI Generated SQL Query", "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'", "Correct"], ["How many superheroes were published by Dark Horse Comics?", "Gold Standard SQL Query", "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'", ""], ["Provide the eye colours of the heroes whose skin colours are gold.", "AI Generated SQL Query", "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id IN (SELECT id FROM colour WHERE colour = 'Gold')", "Correct"], ["Provide the eye colours of the heroes whose skin colours are gold.", "Gold Standard SQL Query", "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'", ""], ["Who is the tallest superhero?", "AI Generated SQL Query", "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "Correct"], ["Who is the tallest superhero?", "Gold Standard SQL Query", "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", ""], ["List down at least five full names of superheroes with blue eyes.", "AI Generated SQL Query", "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5", "Incorrect"], ["List down at least five full names of superheroes with blue eyes.", "Gold Standard SQL Query", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5", ""], ["What is the total number of superheroes that have John as their first name?", "AI Generated SQL Query", "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'", "Correct"], ["What is the total number of superheroes that have John as their first name?", "Gold Standard SQL Query", "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'", ""], ["Please list the year during which the race is held on circuits in Shanghai.", "AI Generated SQL Query", "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.location = 'Shanghai'", "Correct"], ["Please list the year during which the race is held on circuits in Shanghai.", "Gold Standard SQL Query", "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'", ""], ["What's Bruno Senna's Q1 result in the qualifying race No. 354?", "AI Generated SQL Query", "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = '354'", "Correct"], ["What's Bruno Senna's Q1 result in the qualifying race No. 354?", "Gold Standard SQL Query", "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'", ""], ["In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?", "AI Generated SQL Query", "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '0:01:33%'", "Incorrect"], ["In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?", "Gold Standard SQL Query", "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'", ""], ["Name the races in year 2017 that are not hosted in year 2000.", "AI Generated SQL Query", "SELECT T1.name FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.year = '2017' AND T1.name NOT IN ( SELECT T3.name FROM races AS T3 INNER JOIN seasons AS T4 ON T3.year = T4.year WHERE T3.year = '2000' )", "Correct"], ["Name the races in year 2017 that are not hosted in year 2000.", "Gold Standard SQL Query", "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )", ""], ["What is Eddie Irvine's average points scored in year 2000?", "AI Generated SQL Query", "SELECT AVG(T3.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.surname = 'Irvine' AND T3.year = '2000'", "Incorrect"], ["What is Eddie Irvine's average points scored in year 2000?", "Gold Standard SQL Query", "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000", ""], ["Which website should I go to if I want to know more about Anthony Davidson?", "AI Generated SQL Query", "SELECT url FROM drivers WHERE forename = \"Anthony\" AND surname = \"Davidson\"", "Correct"], ["Which website should I go to if I want to know more about Anthony Davidson?", "Gold Standard SQL Query", "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'", ""], ["Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.", "AI Generated SQL Query", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "Correct"], ["Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.", "Gold Standard SQL Query", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", ""], ["How many British drivers were born after 1980?", "AI Generated SQL Query", "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND dob > '1980-12-31'", "Correct"], ["How many British drivers were born after 1980?", "Gold Standard SQL Query", "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'", ""], ["Which race has the shortest actual finishing time? Please give the name and year.", "AI Generated SQL Query", "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds ASC LIMIT 1", "Correct"], ["Which race has the shortest actual finishing time? Please give the name and year.", "Gold Standard SQL Query", "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1", ""], ["List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.", "AI Generated SQL Query", "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5", "Correct"], ["List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.", "Gold Standard SQL Query", "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5", ""], ["What is the full name and date of birth of Austrian drivers born between 1981 and 1991?", "AI Generated SQL Query", "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'", "Correct"], ["What is the full name and date of birth of Austrian drivers born between 1981 and 1991?", "Gold Standard SQL Query", "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'", ""], ["During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?", "AI Generated SQL Query", "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = '2011'", "Correct"], ["During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?", "Gold Standard SQL Query", "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'", ""]]}
