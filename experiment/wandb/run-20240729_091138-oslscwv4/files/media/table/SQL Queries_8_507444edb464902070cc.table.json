{"columns": ["Question", "Type", "Query", "result"], "data": [["Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.", "AI Generated SQL Query", "SELECT `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE `School Type` = 'Continuation' ORDER BY `Percent (%) Eligible Free (Ages 5-17)` ASC LIMIT 3", "Incorrect"], ["Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.", "Gold Standard SQL Query", "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3", ""], ["If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.", "AI Generated SQL Query", "SELECT T1.Website, T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.`CDSCode` WHERE T2.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000", "Incorrect"], ["If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.", "Gold Standard SQL Query", "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL", ""], ["Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(County = 'Colusa', 1, 0)) AS REAL) / SUM(IIF(County = 'Humboldt', 1, 0)) FROM schools WHERE MailState = 'CA'", "Correct"], ["Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "Gold Standard SQL Query", "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'", ""], ["How many accounts who choose issuance after transaction are staying in East Bohemia region?", "AI Generated SQL Query", "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'East Bohemia' AND T3.type = 'POPLATEK PO OBRATU'", "Incorrect"], ["How many accounts who choose issuance after transaction are staying in East Bohemia region?", "Gold Standard SQL Query", "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'", ""], ["List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.", "AI Generated SQL Query", "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9", "Correct"], ["List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.", "Gold Standard SQL Query", "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9", ""], ["Please list the accounts whose district is Tabor that are eligible for loans.", "AI Generated SQL Query", "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Tabor' AND T1.frequency = 'OWNER'", "Incorrect"], ["Please list the accounts whose district is Tabor that are eligible for loans.", "Gold Standard SQL Query", "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'", ""], ["What proportion of customers who have accounts at the Prague branch are female?", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(T3.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T3.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague'", "Correct"], ["What proportion of customers who have accounts at the Prague branch are female?", "Gold Standard SQL Query", "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'", ""], ["What type of bond is there between the atoms TR004_8 and TR004_20?", "AI Generated SQL Query", "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')", "Correct"], ["What type of bond is there between the atoms TR004_8 and TR004_20?", "Gold Standard SQL Query", "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'", ""], ["Is the molecule with the most double bonds carcinogenic?", "AI Generated SQL Query", "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T2.molecule_id, COUNT(T2.bond_id) AS num FROM bond AS T2 WHERE T2.bond_type = ' = ' GROUP BY T2.molecule_id ORDER BY num DESC LIMIT 1 ) AS T3 ON T1.molecule_id = T3.molecule_id", "Incorrect"], ["Is the molecule with the most double bonds carcinogenic?", "Gold Standard SQL Query", "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id", ""]]}