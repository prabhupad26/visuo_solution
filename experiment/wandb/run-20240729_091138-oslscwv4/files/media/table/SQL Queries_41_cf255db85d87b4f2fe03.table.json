{"columns": ["Question", "Type", "Query", "result"], "data": [["Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.", "AI Generated SQL Query", "SELECT `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE `School Type` = 'Continuation' ORDER BY `Percent (%) Eligible Free (Ages 5-17)` ASC LIMIT 3", "Incorrect"], ["Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.", "Gold Standard SQL Query", "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3", ""], ["If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.", "AI Generated SQL Query", "SELECT T1.Website, T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.`CDSCode` WHERE T2.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000", "Incorrect"], ["If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.", "Gold Standard SQL Query", "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL", ""], ["Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(County = 'Colusa', 1, 0)) AS REAL) / SUM(IIF(County = 'Humboldt', 1, 0)) FROM schools WHERE MailState = 'CA'", "Correct"], ["Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "Gold Standard SQL Query", "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'", ""], ["How many accounts who choose issuance after transaction are staying in East Bohemia region?", "AI Generated SQL Query", "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'East Bohemia' AND T3.type = 'POPLATEK PO OBRATU'", "Incorrect"], ["How many accounts who choose issuance after transaction are staying in East Bohemia region?", "Gold Standard SQL Query", "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'", ""], ["List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.", "AI Generated SQL Query", "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9", "Correct"], ["List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.", "Gold Standard SQL Query", "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9", ""], ["Please list the accounts whose district is Tabor that are eligible for loans.", "AI Generated SQL Query", "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Tabor' AND T1.frequency = 'OWNER'", "Incorrect"], ["Please list the accounts whose district is Tabor that are eligible for loans.", "Gold Standard SQL Query", "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'", ""], ["What proportion of customers who have accounts at the Prague branch are female?", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(T3.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T3.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague'", "Correct"], ["What proportion of customers who have accounts at the Prague branch are female?", "Gold Standard SQL Query", "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'", ""], ["What type of bond is there between the atoms TR004_8 and TR004_20?", "AI Generated SQL Query", "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')", "Correct"], ["What type of bond is there between the atoms TR004_8 and TR004_20?", "Gold Standard SQL Query", "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'", ""], ["Is the molecule with the most double bonds carcinogenic?", "AI Generated SQL Query", "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T2.molecule_id, COUNT(T2.bond_id) AS num FROM bond AS T2 WHERE T2.bond_type = ' = ' GROUP BY T2.molecule_id ORDER BY num DESC LIMIT 1 ) AS T3 ON T1.molecule_id = T3.molecule_id", "Incorrect"], ["Is the molecule with the most double bonds carcinogenic?", "Gold Standard SQL Query", "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id", ""], ["Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?", "AI Generated SQL Query", "SELECT MAX(label) FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'Ca' )", "Incorrect"], ["Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?", "Gold Standard SQL Query", "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1", ""], ["Calculate the percentage of carcinogenic molecules which contain the Chlorine element.", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(T2.label = '+' AND T1.element = 'Cl', 1, 0)) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id", "Incorrect"], ["Calculate the percentage of carcinogenic molecules which contain the Chlorine element.", "Gold Standard SQL Query", "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id", ""], ["Calculate the percentage of the cards availabe in Chinese Simplified.", "AI Generated SQL Query", "SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM foreign_data", "Incorrect"], ["Calculate the percentage of the cards availabe in Chinese Simplified.", "Gold Standard SQL Query", "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid", ""], ["What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?", "AI Generated SQL Query", "SELECT T1.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.multiverseid = T2.multiverseId WHERE T1.language = 'French' AND T2.type = 'Creature' AND T2.layout = 'normal' AND T2.borderColor = 'black' AND T2.artist = 'Matthew D. Wilson'", "Incorrect"], ["What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?", "Gold Standard SQL Query", "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'", ""], ["For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?", "AI Generated SQL Query", "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.id = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'", "Incorrect"], ["For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?", "Gold Standard SQL Query", "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'", ""], ["Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.", "AI Generated SQL Query", "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.id = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T2.language = 'Italian' ORDER BY T1.convertedManaCost DESC LIMIT 1", "Incorrect"], ["Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.", "Gold Standard SQL Query", "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC", ""], ["How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?", "AI Generated SQL Query", "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.id = T2.uuid WHERE T1.artist = 'Volkan Ba\u01f5a' AND T2.language = 'French'", "Incorrect"], ["How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?", "Gold Standard SQL Query", "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Ba\u01f5a' AND T2.language = 'French' GROUP BY T1.id ) AS T3", ""], ["User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "AI Generated SQL Query", "SELECT T2.FavoriteCount FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = '3025' AND T1.CreationDate = '2014-04-23 20:29:39.0'", "Correct"], ["User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "Gold Standard SQL Query", "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025", ""], ["Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'", "Correct"], ["Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.", "Gold Standard SQL Query", "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'", ""], ["Which is the most valuable post in 2010? Please give its id and the owner's display name.", "AI Generated SQL Query", "SELECT Id, OwnerDisplayName FROM posts WHERE STRFTIME('%Y', CreationDate) = '2010' ORDER BY FavoriteCount DESC LIMIT 1", "Incorrect"], ["Which is the most valuable post in 2010? Please give its id and the owner's display name.", "Gold Standard SQL Query", "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1", ""], ["Rank heroes published by Marvel Comics by their height in descending order.", "AI Generated SQL Query", "SELECT T1.superhero_name, T1.height_cm FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC", "Incorrect"], ["Rank heroes published by Marvel Comics by their height in descending order.", "Gold Standard SQL Query", "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'", ""], ["Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.", "AI Generated SQL Query", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)", "Correct"], ["Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.", "Gold Standard SQL Query", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79", ""], ["Find the ratio between male superheroes and female superheroes.", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(gender_id = '1', 1, 0)) AS REAL) / SUM(IIF(gender_id = '2', 1, 0)) FROM superhero", "Correct"], ["Find the ratio between male superheroes and female superheroes.", "Gold Standard SQL Query", "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id", ""], ["List the power of superheroes with height greater than 80% of the average height of all superheroes.", "AI Generated SQL Query", "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)", "Correct"], ["List the power of superheroes with height greater than 80% of the average height of all superheroes.", "Gold Standard SQL Query", "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80", ""], ["State the driver with the most points scored. Find his full name with that points.", "AI Generated SQL Query", "SELECT T1.forename, T1.surname, T2.points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1", "Correct"], ["State the driver with the most points scored. Find his full name with that points.", "Gold Standard SQL Query", "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1", ""], ["What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?", "AI Generated SQL Query", "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = '2009'", "Correct"], ["What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?", "Gold Standard SQL Query", "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", ""], ["How many French drivers who obtain the laptime less than 02:00.00?", "AI Generated SQL Query", "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.time < '02:00.00'", "Incorrect"], ["How many French drivers who obtain the laptime less than 02:00.00?", "Gold Standard SQL Query", "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120", ""], ["How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?", "AI Generated SQL Query", "SELECT COUNT(T1.statusId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3 GROUP BY T1.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1", "Correct"], ["How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?", "Gold Standard SQL Query", "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1", ""], ["List the top 5 leagues in ascending order of the number of goals made in all seasons combined.", "AI Generated SQL Query", "SELECT T1.name, SUM(T2.home_team_goal + T2.away_team_goal) AS total_goals FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id GROUP BY T1.name ORDER BY total_goals ASC LIMIT 5", "Correct"], ["List the top 5 leagues in ascending order of the number of goals made in all seasons combined.", "Gold Standard SQL Query", "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5", ""], ["How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?", "AI Generated SQL Query", "SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', T1.date) BETWEEN '2008-08' AND '2008-10'", "Correct"], ["How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?", "Gold Standard SQL Query", "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'", ""], ["What is the average number of goals made by Parma as the away team while playing in Italy?", "AI Generated SQL Query", "SELECT AVG(T2.away_team_goal) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id INNER JOIN Country AS T3 ON T3.id = T2.country_id WHERE T1.team_long_name = 'Parma' AND T3.name = 'Italy'", "Correct"], ["What is the average number of goals made by Parma as the away team while playing in Italy?", "Gold Standard SQL Query", "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'", ""], ["State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.", "AI Generated SQL Query", "SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'", "Correct"], ["State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.", "Gold Standard SQL Query", "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'", ""], ["How many players had the highest potential score for crossing that preferred to use their left foots while attacking?", "AI Generated SQL Query", "SELECT COUNT(id) FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = ( SELECT MAX(crossing) FROM Player_Attributes )", "Correct"], ["How many players had the highest potential score for crossing that preferred to use their left foots while attacking?", "Gold Standard SQL Query", "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)", ""], ["What is the percentage of female patient had total protein not within the normal range?", "AI Generated SQL Query", "SELECT CAST(SUM(IIF(TP < '6.0' OR TP > '8.5', 1, 0)) AS REAL) * 100 / COUNT(ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F'", "Incorrect"], ["What is the percentage of female patient had total protein not within the normal range?", "Gold Standard SQL Query", "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'", ""], ["For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?", "AI Generated SQL Query", "SELECT CAST(SUBSTR(T2.Date, 1, 4) AS INT) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INT) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = '8.4' AND T2.Date = '1991-10-21'", "Correct"], ["For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?", "Gold Standard SQL Query", "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'", ""], ["Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.", "AI Generated SQL Query", "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60", "Correct"], ["Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.", "Gold Standard SQL Query", "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60", ""], ["What is the average age of the male patient with high cholesterol?", "AI Generated SQL Query", "SELECT AVG(STRFTIME('%J', T1.`First Date`) - STRFTIME('%J', T1.Birthday)) / 365.25 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-CHO` >= 250", "Incorrect"], ["What is the average age of the male patient with high cholesterol?", "Gold Standard SQL Query", "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'", ""], ["How many patients born after 1980/1/1 have an abnormal fibrinogen level?", "AI Generated SQL Query", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND (T2.FG < 150 OR T2.FG > 450)", "Incorrect"], ["How many patients born after 1980/1/1 have an abnormal fibrinogen level?", "Gold Standard SQL Query", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'", ""], ["Among the patients have blood clots in veins, how many of them have a normal level of complement 4?", "AI Generated SQL Query", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'APS' AND T3.C4 > 10", "Incorrect"], ["Among the patients have blood clots in veins, how many of them have a normal level of complement 4?", "Gold Standard SQL Query", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'", ""], ["How many patients have a normal anti-DNA level, yet their data are not recorded.", "AI Generated SQL Query", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL", "Correct"], ["How many patients have a normal anti-DNA level, yet their data are not recorded.", "Gold Standard SQL Query", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL", ""], ["What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?", "AI Generated SQL Query", "SELECT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1", "Correct"], ["What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?", "Gold Standard SQL Query", "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1", ""], ["Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?", "AI Generated SQL Query", "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer' AND T1.t_shirt_size = 'Medium'", "Correct"], ["Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?", "Gold Standard SQL Query", "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'", ""], ["What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?", "AI Generated SQL Query", "SELECT T2.event_status FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-08-20'", "Correct"], ["What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?", "Gold Standard SQL Query", "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'", ""]]}
